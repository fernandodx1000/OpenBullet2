@using OpenBullet2.Auth
@using OpenBullet2.Core.Entities
@using OpenBullet2.Helpers
@using System.Net 
@inject AuthenticationStateProvider Auth
@inject NavigationManager Nav
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor ContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<LoginForm> Loc

<p>@Loc["NotAuthedPleaseLogin"]</p>
<EditForm Model="user">
    <label>@Loc["Username"]</label>
    <InputText @bind-Value="user.Username" />
    <label>@Loc["Password"]</label>
    <InputText type="password" @bind-Value="user.Password" />
    <button type="submit" class="btn btn-outline-primary" @onclick="ValidateUser">@Loc["Login"]</button>
     <button type="submit" class="btn btn-outline-primary" @onclick="AddUser">@Loc["Register"]</button>
</EditForm>

@code {

    [Inject] private IModalService Modal { get; set; }
    [Inject] private IGuestRepository GuestRepo { get; set; }


    private class User
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
     
    private User user = new User();

    private async Task ValidateUser()
    {
        IPAddress ip = IPAddress.Parse("127.0.0.1");

        try
        {
            // This will throw if OB2 is behind a reverse proxy
            ip = ContextAccessor.HttpContext.Connection.RemoteIpAddress;
        }
        catch
        {

        }

        try
        {
            await ((OBAuthenticationStateProvider)Auth).AuthenticateUser(user.Username, user.Password, ip);
            Nav.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await js.AlertException(ex);
        }
    }
  
    private async Task AddUser()
        {
            var modal = Modal.Show<GuestAdd>(Loc["AddGuest"]);
            var result = await modal.Result;

            if (!result.Cancelled)
            {
                var entity = (GuestEntity)result.Data;
                await GuestRepo.Add(entity);
                //await RefreshList();
            }
        }
         private async Task RefreshList()
        {
        //    guests = await GuestRepo.GetAll().ToListAsync();

        //    await gridComponent.UpdateGrid();
        //    StateHasChanged();
        }
}
